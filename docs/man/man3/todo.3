.TH "todo" 3 "18 Dec 2009" "Version 1.0" "BDLIB" \" -*- nroff -*-
.ad l
.nh
.SH NAME
todo \- Todo \fBList\fP 
 
.IP "\fBClass \fBArrayRef< T >\fP \fP" 1c
look into something like a string object made of string pointers, and << displays all of the pointed to objects. (this would save copying to construct immuatable concatenated strings, but would only work with the << stream 
.PP
.PP
 
.IP "\fBMember \fBArrayRef::AllocBuf\fP(const size_t bytes) const  \fP" 1c
Implement mempool here. 
.PP
.PP
 
.IP "\fBMember \fBArrayRef::FreeBuf\fP(T *p) const  \fP" 1c
Implement mempool here. 
.PP
.PP
 
.IP "\fBClass \fBHashTable< Key, Value >\fP \fP" 1c
replace() 
.PP
iterators 
.PP
resizing/growing
.PP
.PP
.PP
 
.IP "\fBMember \fBReferenceCountedArray::at\fP(int i) const  \fP" 1c
Perhaps this should throw an exception if out of range? 
.PP
.PP
 
.IP "\fBMember \fBReferenceCountedArray::operator[]\fP(int i) const  \fP" 1c
This is only called on a (const) \fBString\fP, but should for a \fBString\fP as well. 
.PP
.PP
 
.IP "\fBClass \fBReferenceCountedArray< T >::ReferenceCountedArray::Cref\fP \fP" 1c
This should not provide copy constructors for Cref, they shouldn't be needed because of const char \fBString::operator[]\fP This class should be optimized away and fully inlined such that: \fBString\fP s; s[0] = 'a'; Should be rewritten as: s.write(0, 'a'); 
.PP
.PP
 
.IP "\fBClass \fBSlice< T >\fP \fP" 1c
This should not provide copy constructors for Cref, they shouldn't be needed because of const char \fBString::operator[]\fP This class should be optimized away and fully inlined such that: \fBString\fP s('look over there'); s(0, 4) = 'blah''; Should be rewritten as: s.replace(0, 'blah', 4); 
.PP
.PP
 
.IP "\fBMember \fBSlice::operator=\fP(const T &array) \fP" 1c
This needs to account for negative start/len 
.PP
.PP
 
.IP "\fBMember \fBStack::peek\fP() const  \fP" 1c
Throw an exception? 
.PP
.PP
 
.IP "\fBClass \fBString\fP \fP" 1c
compute hash on insert, then use to compare instead of strcmp 
.PP
an updating hash as the copy is done. 
.PP

