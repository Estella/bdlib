.TH "Stack" 3 "18 Dec 2009" "Version 1.0" "BDLIB" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Stack \- A FILO \fBStack\fP, what else!  

.PP
.SH SYNOPSIS
.br
.PP
\fC#include <Stack.h>\fP
.PP
Inherits \fBList< T >\fP.
.PP
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef ListIterator \fBiterator\fP"
.br
.in -1c
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBiterator\fP \fBbegin\fP ()"
.br
.ti -1c
.RI "void \fBclear\fP ()"
.br
.ti -1c
.RI "bool \fBcontains\fP (const iterator_type &ptr) const"
.br
.ti -1c
.RI "\fBiterator\fP \fBend\fP ()"
.br
.ti -1c
.RI "const iterator_type \fBfind\fP (const iterator_type &ptr) const"
.br
.ti -1c
.RI "iterator_type & \fBfindRef\fP (const iterator_type &ptr)"
.br
.RI "\fIReturn a reference to the found element. \fP"
.ti -1c
.RI "void \fBinsert\fP (const iterator_type &ptr)"
.br
.RI "\fIInsert into the list at the head. \fP"
.ti -1c
.RI "bool \fBisEmpty\fP () const"
.br
.ti -1c
.RI "const iterator_type \fBpeek\fP () const "
.br
.RI "\fIPeek at the first element, but don't pop it off. \fP"
.ti -1c
.RI "iterator_type \fBpop\fP ()"
.br
.RI "\fIPop an element off the top of the stack. \fP"
.ti -1c
.RI "void \fBpush\fP (const iterator_type &item)"
.br
.ti -1c
.RI "bool \fBremove\fP (const iterator_type &ptr)"
.br
.ti -1c
.RI "size_t \fBsize\fP () const"
.br
.ti -1c
.RI "\fBStack\fP ()"
.br
.ti -1c
.RI "virtual \fB~Stack\fP ()"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "void \fBdeleteNode\fP (\fBNode\fP *node)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "\fBNode\fP * \fBhead\fP"
.br
.ti -1c
.RI "size_t \fBmy_size\fP"
.br
.ti -1c
.RI "\fBNode\fP * \fBtail\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "\fBList\fP< iterator_type > & \fBoperator<<\fP (\fBList\fP< iterator_type > &list, const iterator_type &item)"
.br
.ti -1c
.RI "\fBStack\fP< iterator_type > & \fBoperator<<\fP (\fBStack\fP< iterator_type > &stack, const iterator_type &item)"
.br
.ti -1c
.RI "\fBStack\fP< iterator_type > & \fBoperator>>\fP (\fBStack\fP< iterator_type > &stack, iterator_type &item)"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<class T> class Stack< T >"
A FILO \fBStack\fP, what else! 
.PP
Definition at line 36 of file Stack.h.
.SH "Member Typedef Documentation"
.PP 
.SS "typedef ListIterator \fBList\fP< T  >::\fBiterator\fP\fC [inherited]\fP"
.PP
Reimplemented in \fBQueue< T >\fP.
.PP
Definition at line 36 of file List.h.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<class T > \fBStack\fP< T >::\fBStack\fP ()\fC [inline]\fP"
.PP
Definition at line 41 of file Stack.h.
.SS "template<class T > virtual \fBStack\fP< T >::~\fBStack\fP ()\fC [inline, virtual]\fP"
.PP
Definition at line 42 of file Stack.h.
.SH "Member Function Documentation"
.PP 
.SS "\fBiterator\fP \fBList\fP< T  >::begin ()\fC [inline, inherited]\fP"
.PP
Reimplemented in \fBQueue< T >\fP.
.PP
Definition at line 251 of file List.h.
.SS "void \fBList\fP< T  >::clear ()\fC [inline, inherited]\fP"
.PP
Definition at line 89 of file List.h.
.SS "bool \fBList\fP< T  >::contains (const \fBiterator_type\fP & ptr) const\fC [inline, inherited]\fP"
.PP
Definition at line 128 of file List.h.
.SS "void \fBList\fP< T  >::deleteNode (Node * node)\fC [inline, protected, inherited]\fP"
.PP
Definition at line 52 of file List.h.
.SS "\fBiterator\fP \fBList\fP< T  >::end ()\fC [inline, inherited]\fP"
.PP
Reimplemented in \fBQueue< T >\fP.
.PP
Definition at line 252 of file List.h.
.SS "const iterator_type \fBList\fP< T  >::find (const \fBiterator_type\fP & ptr) const\fC [inline, inherited]\fP"
.PP
Definition at line 138 of file List.h.
.SS "iterator_type& \fBList\fP< T  >::findRef (const \fBiterator_type\fP & ptr)\fC [inline, inherited]\fP"
.PP
Return a reference to the found element. 
.PP
Definition at line 152 of file List.h.
.SS "void \fBList\fP< T  >::insert (const \fBiterator_type\fP & ptr)\fC [inline, inherited]\fP"
.PP
Insert into the list at the head. 
.PP
\fBParameters:\fP
.RS 4
\fIptr\fP The ptr to insert 
.RE
.PP

.PP
Reimplemented in \fBSortedList< T >\fP.
.PP
Definition at line 108 of file List.h.
.SS "bool \fBList\fP< T  >::isEmpty () const\fC [inline, inherited]\fP"
.PP
Definition at line 101 of file List.h.
.SS "template<class T > const iterator_type \fBStack\fP< T >::peek () const\fC [inline]\fP"
.PP
Peek at the first element, but don't pop it off. 
.PP
\fBTodo\fP
.RS 4
Throw an exception? 
.RE
.PP

.PP
Definition at line 65 of file Stack.h.
.SS "template<class T > iterator_type \fBStack\fP< T >::pop ()\fC [inline]\fP"
.PP
Pop an element off the top of the stack. 
.PP
Definition at line 47 of file Stack.h.
.SS "template<class T > void \fBStack\fP< T >::push (const iterator_type & item)\fC [inline]\fP"
.PP
Definition at line 73 of file Stack.h.
.SS "bool \fBList\fP< T  >::remove (const \fBiterator_type\fP & ptr)\fC [inline, inherited]\fP"
.PP
Definition at line 161 of file List.h.
.SS "size_t \fBList\fP< T  >::size () const\fC [inline, inherited]\fP"
.PP
Definition at line 100 of file List.h.
.SH "Friends And Related Function Documentation"
.PP 
.SS "\fBList\fP<iterator_type>& operator<< (\fBList\fP< \fBiterator_type\fP > & list, const \fBiterator_type\fP & item)\fC [friend, inherited]\fP"
.PP
\fBSee also:\fP
.RS 4
\fBinsert\fP 
.RE
.PP

.PP
Definition at line 123 of file List.h.
.SS "template<class T > \fBStack\fP<iterator_type>& operator<< (\fBStack\fP< iterator_type > & stack, const iterator_type & item)\fC [friend]\fP"
.PP
\fBSee also:\fP
.RS 4
\fBpush\fP 
.RE
.PP

.PP
Definition at line 80 of file Stack.h.
.SS "template<class T > \fBStack\fP<iterator_type>& operator>> (\fBStack\fP< iterator_type > & stack, iterator_type & item)\fC [friend]\fP"
.PP
\fBSee also:\fP
.RS 4
\fBpop\fP 
.RE
.PP

.PP
Definition at line 56 of file Stack.h.
.SH "Member Data Documentation"
.PP 
.SS "\fBNode\fP* \fBList\fP< T  >::\fBhead\fP\fC [protected, inherited]\fP"
.PP
Definition at line 67 of file List.h.
.SS "size_t \fBList\fP< T  >::\fBmy_size\fP\fC [protected, inherited]\fP"
.PP
Definition at line 69 of file List.h.
.SS "\fBNode\fP* \fBList\fP< T  >::\fBtail\fP\fC [protected, inherited]\fP"
.PP
Definition at line 68 of file List.h.

.SH "Author"
.PP 
Generated automatically by Doxygen for BDLIB from the source code.
